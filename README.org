* beer-o-meter

BEER-O-METER is an application which can tell management when it is
time to order the beer for a celebration of a team's software quality
improvements.

** Intention

This application intends to measure software quality improvements
using two sets of measurements, both defined in Fosgren, Humble, and
Kim's book [[https://www.amazon.com/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339][Accelerate: The Science of Lean Software and DevOps:
Building and Scaling High Performing Technology Organizations]].

*** In terms of SOFTWARE DELIVERY PERFORMANCE: 

 - deploy frequency
 - lead time
 - mean time to restore
 - change fail %

*** In terms of QUALITY:

 - "unplanned work" and "rework"
 - "manual work"

*** Use Work Planning Data

 In the ICE Organization, we use [[https://www52.v1host.com/skatteministeriet/Default.aspx?menu=MyHomeEnterpriseGettingStartedPage][Version1 (aka Digital.AI Agility)]] to
 plan and manage our software work flow assets. In their [[https://docs.digital.ai/bundle/app-management/page/Developers-Library_10403644072.html][Developer's
 Library]], there exists a set of RESTful API's which will allow the
 application to query, process, and reduce the assets into the
 forementioned measurements.

** Background Reading

*** Version1
- [[https://docs.digital.ai/bundle/agility-onlinehelp/page/Content/DeveloperLibrary/Developer_Library.htm][Digital.ai Agility Developer Library]]
- [[https://docs.digital.ai/bundle/agility-onlinehelp/page/Content/DeveloperLibrary/VersionOne_REST_API_Tutorial.htm][Digital.ai Agility REST API Tutorial]]
- [[https://versionone.github.io/api-docs/#][VersionOne API Docs]]
- [[https://www52.v1host.com/skatteministeriet/ApiConsole.mvc][API Console]]

**** terminology
- Asset: Story / Backlog Item
- Asset Type: classes of data available
- Scope (system assets created within a scope or project)

** Discussion
Version1
- With regard to defects, it would be important to filter on things like "ALM.." or "INC.."
- we could get a list of team names, and a list of pi's and make a graph/bar chart
- can we determine if a defect has been "reopened"
- can we determine time spent in states?, time spent in teams?
- how often has the defect changed teams?
Git
- tags with defect number in git, time to deploy is registered
- when was the tag created in git which contains the fix (mttf)
- when was the defect closed in V1, and when was the delta tag created?
- when was the defect tag created, and when was it included in the 

** Planning

Sketch out the data we can get, get one data stream and graph, and
then make a proposal based on the future.

Can we get a defect out of version1 and then determine when it was deployed.

If we measure number of defects, then we will get fewer defects. So
let's not do this.

Get a defect out of version1 with clojure.

*** Preliminary
1. get a version1 access token (seems like it might be easier with
   username:password)
2. determine data model / contract of api
3. 

*** Query
`rest-1.v1/Data/Scope/688178/Workitems:Defect[Team.Name='Team Sagsproces']`
